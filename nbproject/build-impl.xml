<?xml version="1.0" encoding="UTF-8"?>
<!-- *** GENERATED FROM project.xml - DO NOT EDIT *** -->
<project name="-impl" default="jar" basedir="..">
    <target name="pre-init"/>
    <target name="pre-load-properties" depends="pre-init">
        <property file="nbproject/private/private.properties"/>
        <property name="user.properties.file" location="${netbeans.user}/build.properties"/>
        <available property="user.properties.file.exists" file="${user.properties.file}"/>
    </target>
    <target name="exists.config.active" depends="pre-load-properties" unless="config.active">
        <echo level="warning" message="Active configuration (config.active property) is not set - using default."/>
        <property value="" name="config.active"/>
    </target>
    <target name="exists.netbeans.user" depends="pre-load-properties" unless="netbeans.user">
        <echo level="warning" message="NetBeans IDE user directory (netbeans.user property) is not set. By specifying this property many properties required by the project will be automatically evaluated (e.g.: ant-ext library home, ...). You could also open this project in the NetBeans IDE - in this case this property would be set automatically."/>
    </target>
    <target name="exists.user.properties.file" depends="pre-load-properties" unless="user.properties.file.exists">
        <echo level="warning" message="User properties file (user.properties.file) property is not set. By specifying this property many properties required by the project will be automatically evaluated (e.g.: libraries, platforms, ...)."/>
    </target>
    <target name="load-properties" depends="pre-load-properties,exists.config.active,exists.netbeans.user,exists.user.properties.file">
        <property file="${user.properties.file}"/>
        <tempfile property="temp.file" destdir="${java.io.tmpdir}"/>
        <copy file="nbproject/project.properties" tofile="${temp.file}" overwrite="true">
            <filterchain>
                <linecontainsregexp>
                    <regexp pattern="^((configs\.${config.active}\.)|(reference.)|(file.reference.)|(project.))"/>
                </linecontainsregexp>
            </filterchain>
        </copy>
        <replace file="${temp.file}" token="configs.${config.active}." value=""/>
        <property file="${temp.file}"/>
        <property file="nbproject/project.properties"/>
        <copy file="${user.properties.file}" tofile="${temp.file}" overwrite="true" failonerror="false"/>
        <replace file="${temp.file}" token="platforms.${platform.active}." value="platform."/>
        <property file="${temp.file}"/>
        <echo file="${temp.file}">evaluated.platform.bootclasspath=${platform.bootclasspath}</echo>
        <property file="${temp.file}"/>
        <delete file="${temp.file}"/>
    </target>
    <target name="exists.platform.active" depends="load-properties" unless="platform.active">
        <echo level="warning" message="Active platform (platform.active property) in not set. If you set this and user.properties.file property, many properties required by the project will be automatically evaluated (e.g.: platform home, platform classpath, ...)."/>
    </target>
    <target name="exists.platform.configuration" unless="platform.configuration" depends="load-properties">
        <echo level="warning" message="Platform configuration (platform.configuration) is not set. Using default (CLDC-1.0) configuration."/>
        <property name="platform.configuration" value="CLDC-1.0"/>
    </target>
    <target name="exists.platform.profile" unless="platform.profile" depends="load-properties">
        <echo level="warning" message="Platform profile (platform.profile) is not set. Using default (MIDP-1.0) profile."/>
        <property name="platform.profile" value="MIDP-1.0"/>
    </target>
    <target name="init" depends="pre-init,load-properties,exists.platform.active,exists.platform.configuration,exists.platform.profile">
        <fail unless="libs.j2me_ant_ext.classpath">Classpath to J2ME Ant extension library (libs.j2me_ant_ext.classpath property) is not set. For example: location of mobility/modules/org-netbeans-modules-kjava-antext.jar file in the IDE installation directory.</fail>
        <fail unless="platform.home">Platform home (platform.home property) is not set. Value of this property should be ${platform.active.description} emulator home directory location.</fail>
        <fail unless="platform.bootclasspath">Platform boot classpath (platform.bootclasspath property) is not set. Value of this property should be ${platform.active.description} emulator boot classpath containing all J2ME classes provided by emulator.</fail>
        <fail unless="src.dir">Must set src.dir</fail>
        <fail unless="build.classes.dir">Must set build.classes.dir</fail>
        <fail unless="preprocessed.dir">Must set preprocessed.dir</fail>
        <fail unless="preverify.classes.dir">Must set preverify.classes.dir</fail>
        <fail unless="obfuscated.classes.dir">Must set obfuscated.classes.dir</fail>
        <fail unless="dist.dir">Must set dist.dir</fail>
        <fail unless="dist.jar">Must set dist.jar</fail>
        <fail unless="dist.jad">Must set dist.jad</fail>
        <fail unless="obfuscator.srcjar">Must set obfuscator.srcjar</fail>
        <fail unless="obfuscator.destjar">Must set obfuscator.destjar</fail>
        <fail unless="dist.javadoc.dir">Must set dist.javadoc.dir</fail>
        <property name="obfuscator.classpath" value=""/>
        <property name="kjava.configuration" value=""/>
        <property name="platform.type" value="UEI-1.0"/>
        <property name="platform.device" value=""/>
        <property name="obfuscation.level" value="0"/>
        <property name="sign.enabled" value="false"/>
        <property name="sign.keystore" value=""/>
        <property name="sign.keystore.password" value=""/>
        <property name="sign.alias" value=""/>
        <property name="sign.alias.password" value=""/>
        <property name="dist.jad.url" value="file://"/>
        <property name="javac.source" value="1.3"/>
        <property name="javac.target" value="1.1"/>
        <condition property="no.deps">
            <istrue value="${no.dependencies}"/>
        </condition>
        <condition property="no.javadoc.preview">
            <isfalse value="${javadoc.preview}"/>
        </condition>
        <condition property="filter.excludes.evaluated" value="${filter.excludes},**/*Test.java,**/test,**/test/**">
            <istrue value="${filter.exclude.tests}"/>
        </condition>
        <property name="filter.excludes.evaluated" value="${filter.excludes}"/>
        <condition property="evaluated.run.security.domain" value="">
            <isfalse value="${run.use.security.domain}"/>
        </condition>
        <property name="evaluated.run.security.domain" value="${run.security.domain}"/>
        <taskdef resource="org/netbeans/modules/kjava/antext/defs.properties">
            <classpath>
                <pathelement path="${libs.j2me_ant_ext.classpath}"/>
            </classpath>
        </taskdef>
        <uptodate property="no.clean.before.build" targetfile="${preprocessed.dir}/.timestamp">
            <srcfiles dir="nbproject">
                <include name="project.properties"/>
                <include name="build-impl.xml"/>
            </srcfiles>
        </uptodate>
        <ant target="post-init" inheritall="true" inheritrefs="true"/>
    </target>
    <target name="post-init"/>
    <target name="deps-jar" depends="init" unless="no.deps"/>
    <target name="conditional-clean" depends="init" unless="no.clean.before.build" description="Clean project in case its meta information has changed.">
        <ant target="clean"/>
    </target>
    <target name="pre-preprocess"/>
    <target name="preprocess" depends="init,pre-preprocess,deps-jar,conditional-clean" description="Preprocess project sources.">
        <mkdir dir="${preprocessed.dir}"/>
        <echo message="ignore me" file="${preprocessed.dir}/.timestamp"/>
        <nb-prep destdir="${preprocessed.dir}" preprocessfor="${config.active}">
            <fileset dir="${src.dir}" defaultexcludes="${filter.use.standard}" excludes="${filter.excludes.evaluated}"/>
        </nb-prep>
        <ant target="post-preprocess" inheritall="true" inheritrefs="true"/>
    </target>
    <target name="post-preprocess"/>
    <target name="extract-libs" depends="init,deps-jar,conditional-clean" description="Extracts all bundled libraries.">
        <mkdir dir="${build.classes.dir}"/>
        <nb-extract dir="${build.classes.dir}" excludeManifest="true">
            <classpath>
                <path path="${libs.classpath}"/>
            </classpath>
        </nb-extract>
    </target>
    <target name="pre-compile"/>
    <target name="compile" depends="init,preprocess,extract-libs,pre-compile" description="Compile project classes.">
        <mkdir dir="${build.classes.dir}"/>
        <javac includeantruntime="false" source="${javac.source}" target="${javac.target}" deprecation="${javac.deprecation}" optimize="${javac.optimize}" debug="${javac.debug}" destdir="${build.classes.dir}" srcdir="${preprocessed.dir}" bootclasspath="${evaluated.platform.bootclasspath}">
            <classpath>
                <path path="${libs.classpath}"/>
            </classpath>
        </javac>
        <copy todir="${build.classes.dir}">
            <fileset dir="${src.dir}" defaultexcludes="${filter.use.standard}" excludes="${filter.excludes.evaluated},${build.classes.excludes}"/>
        </copy>
        <ant target="post-compile" inheritall="true" inheritrefs="true"/>
    </target>
    <target name="post-compile"/>
    <target name="pre-compile-single"/>
    <target name="compile-single" depends="init,preprocess,extract-libs,pre-compile-single" description="Compile selected project classes.">
        <fail unless="javac.includes">Must select some files in the IDE or set javac.includes</fail>
        <mkdir dir="${build.classes.dir}"/>
        <javac includeantruntime="false" source="${javac.source}" target="${javac.target}" deprecation="${javac.deprecation}" optimize="${javac.optimize}" debug="${javac.debug}" srcdir="${preprocessed.dir}" destdir="${build.classes.dir}" bootclasspath="${evaluated.platform.bootclasspath}" includes="${javac.includes}">
            <classpath>
                <path path="${libs.classpath}"/>
            </classpath>
        </javac>
        <ant target="post-compile-single" inheritall="true" inheritrefs="true"/>
    </target>
    <target name="post-compile-single"/>
    <target name="create-jad" depends="init">
        <dirname file="${dist.dir}/${dist.jad}" property="dist.jad.dir"/>
        <mkdir dir="${dist.jad.dir}"/>
        <condition property="evaluated.manifest.apipermissions" value="${manifest.apipermissions}">
            <not>
                <equals arg1="${platform.profile}" arg2="MIDP-1.0"/>
            </not>
        </condition>
        <condition property="evaluated.manifest.pushregistry" value="${manifest.pushregistry}">
            <not>
                <equals arg1="${platform.profile}" arg2="MIDP-1.0"/>
            </not>
        </condition>
        <condition property="contains.manifest.configuration">
            <contains substring="MicroEdition-Configuration: " string="${manifest.others}"/>
        </condition>
        <condition property="contains.manifest.profile">
            <contains substring="MicroEdition-Profile: " string="${manifest.others}"/>
        </condition>
        <property value="" name="evaluated.manifest.apipermissions"/>
        <property value="" name="evaluated.manifest.pushregistry"/>
        <echo file="${dist.dir}/${dist.jad}">${manifest.midlets}${evaluated.manifest.apipermissions}${evaluated.manifest.pushregistry}${manifest.others}</echo>
        <ant target="add-configuration" inheritall="true" inheritrefs="true"/>
        <ant target="add-profile" inheritall="true" inheritrefs="true"/>
    </target>
    <target name="add-configuration" unless="contains.manifest.configuration">
        <echo file="${dist.dir}/${dist.jad}" append="true">MicroEdition-Configuration: ${platform.configuration}
</echo>
    </target>
    <target name="add-profile" unless="contains.manifest.profile">
        <echo file="${dist.dir}/${dist.jad}" append="true">MicroEdition-Profile: ${platform.profile}
</echo>
    </target>
    <target name="pre-obfuscate"/>
    <target name="obfuscate-check" depends="init,compile" description="Up-to-date check before obfuscation.">
        <uptodate property="no.obfusc" targetfile="${obfuscator.destjar}">
            <srcfiles dir="${build.classes.dir}"/>
        </uptodate>
    </target>
    <target name="obfuscate" depends="init,compile,obfuscate-check,create-jad,pre-obfuscate" description="Obfuscate project classes." unless="no.obfusc">
        <dirname file="${obfuscator.srcjar}" property="obfuscator.srcjar.dir"/>
        <dirname file="${obfuscator.destjar}" property="obfuscator.destjar.dir"/>
        <mkdir dir="${obfuscator.srcjar.dir}"/>
        <mkdir dir="${obfuscator.destjar.dir}"/>
        <jar jarfile="${obfuscator.srcjar}" basedir="${build.classes.dir}"/>
        <nb-obfuscate srcjar="${obfuscator.srcjar}" destjar="${obfuscator.destjar}" obfuscatorclasspath="${obfuscator.classpath}" classpath="${evaluated.platform.bootclasspath}" jadfile="${dist.dir}/${dist.jad}" obfuscationLevel="${obfuscation.level}"/>
        <mkdir dir="${obfuscated.classes.dir}"/>
        <unjar src="${obfuscator.destjar}" dest="${obfuscated.classes.dir}"/>
        <ant target="post-obfuscate" inheritall="true" inheritrefs="true"/>
    </target>
    <target name="post-obfuscate"/>
    <target name="pre-preverify"/>
    <target name="preverify" depends="init,compile,obfuscate,pre-preverify" description="Preverify project classes.">
        <mkdir dir="${preverify.classes.dir}"/>
        <nb-preverify srcdir="${obfuscated.classes.dir}" destdir="${preverify.classes.dir}" classpath="${evaluated.platform.bootclasspath}" configuration="${platform.configuration}" platformhome="${platform.home}" platformtype="${platform.type}" commandline="${platform.preverifycommandline}"/>
        <ant target="post-preverify" inheritall="true" inheritrefs="true"/>
    </target>
    <target name="post-preverify"/>
    <target name="pre-jar"/>
    <target name="jar" depends="init,preverify,create-jad,pre-jar" description="Build jar and application descriptor.">
        <dirname file="${dist.dir}/${dist.jar}" property="dist.jar.dir"/>
        <mkdir dir="${dist.jar.dir}"/>
        <jar compress="${jar.compress}" jarfile="${dist.dir}/${dist.jar}" manifest="${dist.dir}/${dist.jad}">
            <fileset dir="${preverify.classes.dir}"/>
            <fileset dir="${obfuscated.classes.dir}">
                <exclude name="**/*.class"/>
            </fileset>
        </jar>
        <nb-jad jadfile="${dist.dir}/${dist.jad}" jarfile="${dist.dir}/${dist.jar}" url="${dist.jar}" sign="${sign.enabled}" keystore="${sign.keystore}" keystorepassword="${sign.keystore.password}" alias="${sign.alias}" aliaspassword="${sign.alias.password}"/>
        <ant target="post-jar" inheritall="true" inheritrefs="true"/>
    </target>
    <target name="post-jar"/>
    <target name="run" depends="init" description="Run MIDlet suite.">
        <nb-run jadfile="${dist.dir}/${dist.jad}" jadurl="${dist.jad.url}" device="${platform.device}" platformhome="${platform.home}" platformtype="${platform.type}" execmethod="${run.method}" securitydomain="${evaluated.run.security.domain}" commandline="${platform.runcommandline}"/>
    </target>
    <target name="debug" description="Debug project." depends="init">
        <parallel>
            <nb-run debug="true" debugsuspend="true" debugserver="true" debuggeraddressproperty="jpda.port" platformtype="${platform.type}" platformhome="${platform.home}" device="${platform.device}" jadfile="${dist.dir}/${dist.jad}" execmethod="${run.method}" securitydomain="${evaluated.run.security.domain}" commandline="${platform.debugcommandline}"/>
            <sequential>
                <sleep seconds="5"/>
                <ant target="nbdebug"/>
            </sequential>
        </parallel>
    </target>
    <target name="nbdebug" description="Start NetBeans debugger" if="netbeans.home">
        <nb-kjava-debug address="${jpda.port}" name="${app.codename}" delay="0" timeout="20000" period="1000">
            <bootclasspath>
                <path path="${evaluated.platform.bootclasspath}"/>
            </bootclasspath>
            <classpath>
                <path path="${dist.dir}/${dist.jar}"/>
            </classpath>
            <sourcepath>
                <path path="${src.dir}"/>
                <path path="${libs.src.path}"/>
            </sourcepath>
        </nb-kjava-debug>
    </target>
    <target name="javadoc" depends="init,preprocess">
        <mkdir dir="${dist.javadoc.dir}"/>
        <javadoc source="${javac.source}" destdir="${dist.javadoc.dir}" bootclasspath="${evaluated.platform.bootclasspath}" notree="${javadoc.notree}" use="${javadoc.use}" nonavbar="${javadoc.nonavbar}" noindex="${javadoc.noindex}" splitindex="${javadoc.splitindex}" author="${javadoc.author}" version="${javadoc.version}" windowtitle="${javadoc.windowtitle}" private="${javadoc.private}">
            <classpath>
                <path path="${libs.classpath}"/>
            </classpath>
            <sourcepath>
                <pathelement location="${preprocessed.dir}"/>
            </sourcepath>
            <fileset dir="${preprocessed.dir}"/>
        </javadoc>
        <ant target="browse-javadoc"/>
    </target>
    <target name="browse-javadoc" if="netbeans.home" unless="no.javadoc.preview">
        <nbbrowse file="${dist.javadoc.dir}/index.html"/>
    </target>
    <target name="for-all-configs">
        <antcall target="${target.to.call}" inheritall="false" inheritrefs="false">
            <param name="config.active" value=""/>
            <param name="sign.keystore.password" value="${configs.Default.sign.keystore.password}"/>
            <param name="sign.alias.password" value="${configs.Default.sign.alias.password}"/>
        </antcall>
    </target>
    <target name="jar-all">
        <antcall target="for-all-configs">
            <param name="target.to.call" value="jar"/>
        </antcall>
    </target>
    <target name="javadoc-all">
        <antcall target="for-all-configs">
            <param name="target.to.call" value="javadoc"/>
        </antcall>
    </target>
    <target name="clean-all" depends="load-properties">
        <fail unless="build.root.dir">Property build.root.dir is not set. By default its value should be \"build\".</fail>
        <fail unless="dist.root.dir">Property dist.root.dir is not set. By default its value should be \"dist\".</fail>
        <delete dir="${build.root.dir}"/>
        <delete dir="${dist.root.dir}"/>
        <antcall target="for-all-configs">
            <param name="target.to.call" value="clean"/>
        </antcall>
    </target>
    <target name="pre-clean"/>
    <target name="clean" depends="init,pre-clean" description="Clean build products.">
        <delete dir="${preprocessed.dir}"/>
        <delete dir="${build.classes.dir}"/>
        <delete file="${obfuscator.srcjar}"/>
        <delete file="${obfuscator.destjar}"/>
        <delete dir="${obfuscated.classes.dir}"/>
        <delete dir="${preverify.classes.dir}"/>
        <delete file="${dist.dir}/${dist.jar}"/>
        <delete file="${dist.dir}/${dist.jad}"/>
        <delete dir="${dist.javadoc.dir}"/>
        <ant target="post-clean" inheritall="true" inheritrefs="true"/>
    </target>
    <target name="post-clean"/>
</project>
